#!/usr/bin/env ruby

# == Synopsis
#   Subscribes to a queue server and processess recived messages
#
# == Examples
#   This command calls "cat" for each message recibed
#     subscribe --exec cat
#
# == Usage
#   subscribe [options]
#   For help use: subscribe -h
#
# == Options
#   -h, --help          Displays help message
#   -V, --version       Display the version, then exit
#   -v, --verbose       Turn on verbose output 
#   -t, --mom TYPE      MOM type. Default: xmlblaster
#       --exec          Command to call when a messages are recived

$:.unshift(File.dirname(__FILE__) + '/../lib')

require 'optparse'
require 'ostruct'
require 'rdoc/usage'
require "adaptation"
require 'yaml'
require 'adaptation/xmlblaster/xmlblaster_callback_client'

class SubscribeApp
  VERSION = '0.1'

  attr_reader :options, :logger, :config

  def initialize(arguments, stdin)
    @arguments = arguments
    @stdin = stdin
    # Set defaults
    @options = OpenStruct.new
    @options.mom = 'xmlblaster'
 end

  def run
    if parsed_options? && arguments_valid?
      process_arguments
      # Set logger
      @logger = Logger.new(STDOUT)
      @logger.level = options.verbose ? Logger::DEBUG : Logger::INFO
      @logger.debug "Created logger"
      @logger.debug "Adaptation version = #{Adaptation::VERSION::STRING}"
      Adaptation::Base.logger = logger
      # Read mom.yml config
      @config = YAML::load(File.open("config/mom.yml"))[options.mom]
      process_command
    else
      output_usage
    end
  end

  protected

  def parsed_options?
    # Specify options
    opts = OptionParser.new
    opts.on('-V', '--version')    { output_version ; exit 0 }
    opts.on('-v', '--verbose')    { |a| @options.verbose = true }
    opts.on('-h', '--help')       { output_help }
    opts.on('-t', '--mom-type MOMTYPE') { |a| @options.mom = a }
    opts.on('--exec COMMAND')           { |a| @options.exec = a }
    #opts.on('--execdir DIR')            { |a| @options.execdir = a }
    opts.parse!(@arguments) rescue return false
    true
  end

  # True if required arguments were provided
  def arguments_valid?
    true if @arguments.length == 0
  end

  # Setup the arguments
  def process_arguments
  end

  def output_help
    output_version
    RDoc::usage() #exits app
  end

  def output_usage
    RDoc::usage('usage') # gets usage from comments above
  end

  def output_version
    puts "#{File.basename(__FILE__)} version #{VERSION}"
  end

  def druby_subscribe
    require 'adaptation/druby_subscriber'

    mom_uri = "druby://#{config["mom"]["host"]}:#{config["mom"]["port"]}"
    subscriber_uri = "druby://#{config["subscriber"]["host"]}:#{config["subscriber"]["port"]}"
    topics = config["subscriber"]["topics"].gsub(" ", "").split(',')

    Signal.trap("INT") { logger.info "Shutting down subscriber (#{options.mom})"; exit }

    oapdaemon = Adaptation::Mom::DrubySubscriber.new subscriber_uri, mom_uri, topics
    oapdaemon.start
  end

  def xmlblaster_subscribe

    xbcc = XmlblasterCallbackClient.new(
      config["mom"]["host"],
      config["mom"]["port"],
      config["subscriber"]["host"],
      config["subscriber"]["port"],
      config["subscriber"]["public_host"],
      config["subscriber"]["public_port"],
      logger
    )

    user = config["subscriber"]["subscriber_user"].nil? ? config["subscriber"]["host"] : config["subscriber"]["subscriber_user"]
    password = config["subscriber"]["subscriber_password"].nil? ? "empty" : config["subscriber"]["subscriber_password"]
    xbcc.login(user, password)

    topics = (config["subscriber"]["topics"].nil? or config["subscriber"]["topics"] == "all") ? nil : config["subscriber"]["topics"].gsub(" ","").split(',')
    if topics.nil?
      xbcc.subscribe(
                     "<key oid='' queryType='XPATH'> /xmlBlaster/key[starts-with(@oid,'.')] </key>",
                     "<qos><persistent/><initialUpdate>false</initialUpdate>
         <duplicateUpdates>false</duplicateUpdates><multiSubscribe>false</multiSubscribe>
         <history numEntries='1'/></qos>"
                    )
    else
      topics.each do |topic|
        logger.info "Subscribe '#{topic}' ..."
        xbcc.subscribe(
                       "<key oid='#{topic}'/>",
                       "<qos><persistent/><initialUpdate>false</initialUpdate>
           <duplicateUpdates>false</duplicateUpdates><multiSubscribe>false</multiSubscribe>
           <history numEntries='1'/></qos>"
                      )
      end
    end

    Signal.trap('INT') {
      logger.info "Shutting down subscriber (#{options.mom})"
      begin
        xbcc.unsubscribe(
                         "<key oid='#{topic}'/>",
                         "<qos><persistent/><initialUpdate>false</initialUpdate>
           <duplicateUpdates>false</duplicateUpdates><multiSubscribe>false</multiSubscribe>
           <history numEntries='1'/></qos>"
                        )
      rescue
      end
      xbcc.logout
      exit
    }

    sleep
  end

  def process_command
    ApplicationAdaptor.options = options
    case options.mom
    when 'druby'
      druby_subscribe
    when 'xmlblaster'
      xmlblaster_subscribe
    else
      logger.error "Unknown MOM server type: #{options.mom}"
    end
  end
end

app = SubscribeApp.new(ARGV, STDIN)
app.run

